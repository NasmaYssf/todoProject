import 'dart:convert';
import 'package:flutter/cupertino.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sqflite/sqflite.dart';
import 'package:plantask/Model/Todo.dart';
import 'package:plantask/DataBase/DatabaseHelper.dart';
import 'package:plantask/services/api_service.dart';
import 'package:collection/collection.dart';


class SyncService {

  //============================== Sync todos ===================================
  static Future<void> syncTodos(Database db) async {
    debugPrint('üîÅ Sync intelligent lanc√©');
    final prefs = await SharedPreferences.getInstance();
    final accountId = prefs.getInt('account_id');

    if (accountId == null) {
      debugPrint("‚ö†Ô∏è Aucun account_id trouv√©, sync annul√©e");
      return;
    }

    try {
      // R√©cup√©rer les todos du serveur
      final response = await ApiService.getTodos(accountId);
      final List<dynamic> serverRaw = response['data'] ?? [];
      final List<Todo> serverTodos = serverRaw
          .map((item) => Todo.fromMap(Map<String, dynamic>.from(item)))
          .toList();

      for (final todo in serverTodos) {
        debugPrint("üìù Serveur: ${todo.id} | ${todo.todo} | ${todo.date} | done: ${todo.isCompleted}");
      }

      // Les todos sur le serveur sont d√©j√† stock√©s au format "localId#todoText"
      final Set<String> serverKeys = serverTodos
          .map((t) => t.todo) // Directement la valeur todo du serveur (d√©j√† "1#tache 1")
          .toSet();

      debugPrint("üîç Cl√©s serveur trouv√©es: $serverKeys");

      // R√©cup√©rer les todos locaux non synchronis√©s
      final localRaw = await db.query(
        'todos',
        where: 'synced = 0 AND account_id = ?',
        whereArgs: [accountId],
      );

      final List<Todo> localTodos = localRaw
          .map((item) => Todo.fromMap(Map<String, dynamic>.from(item)))
          .toList();

      int syncedCount = 0;
      int skippedCount = 0;
      int deletedCount = 0;

      for (final local in localTodos) {
        // debug : v√©rifier toutes les valeurs possibles d'ID
        debugPrint("üîç Debug local todo:");
        debugPrint("   - local.id: ${local.id}");
        debugPrint("   - local.LocalTodoId: ${local.LocalTodoId}");
        debugPrint("   - local.todo: ${local.todo}");

        //  Essayer plusieurs sources pour l'ID local
        final localId = local.id?.toString() ??
            local.LocalTodoId?.toString() ??
            '';

        if (localId.isEmpty) {
          debugPrint("‚ö†Ô∏è Aucun ID local trouv√© pour: ${local.todo}");
          continue;
        }

        final key = "$localId#${local.todo}";

        debugPrint("üîç V√©rification locale: $key");

        // V√©rifier si cette cl√© existe d√©j√† sur le serveur
        if (serverKeys.contains(key)) {
          debugPrint("üîç Todo existe d√©j√†: $key - V√©rification des modifications...");

          final serverTodo = serverTodos.firstWhere((t) => t.todo == key);

          bool needsUpdate = false;
          final changedFields = <String, dynamic>{};

          // Comparer le statut done
          if (local.isCompleted != serverTodo.isCompleted) {
            needsUpdate = true;
            changedFields['done'] = local.isCompleted;
            debugPrint("üìù Modification d√©tect√©e - done: ${serverTodo.isCompleted} ‚Üí ${local.isCompleted}");
          }

          // Comparer la date
          if (local.date != serverTodo.date) {
            needsUpdate = true;
            changedFields['date'] = local.date;
            debugPrint("üìù Modification d√©tect√©e - date: ${serverTodo.date} ‚Üí ${local.date}");
          }

          if (needsUpdate) {
            //  Pr√©parer le payload complet pour la mise √† jour
            final updatePayload = <String, dynamic>{
              'todo_id': serverTodo.todoId, // ID du serveur pour identifier le todo
              'account_id': local.userId,
              ...changedFields, // Les champs modifi√©s (done, date, etc.)
            };

            debugPrint("üì§ Mise √† jour sur le serveur pour: $key");
            debugPrint("   Payload: $updatePayload");

            try {
              //  Utiliser votre m√©thode existante
              final updateResponse = await ApiService.updateTodo(updatePayload);

              // Marquer comme synchronis√© en local
              await db.update(
                'todos',
                {
                  'synced': 1,
                  'updated_at': DateTime.now().toIso8601String(),
                },
                where: 'id = ?',
                whereArgs: [local.id],
              );
              debugPrint("‚úÖ Todo mis √† jour avec succ√®s: $key");
              syncedCount++;

            } catch (e) {
              debugPrint("‚ùå √âchec mise √† jour serveur pour: $key - Erreur: $e");
            }
          } else {
            debugPrint("‚è≠Ô∏è Aucune modification d√©tect√©e pour: $key");
            skippedCount++;
          }

          continue;
        }

        // Pr√©parer le payload pour insertion
        final payload = {
          "account_id": accountId,
          "date": local.date,
          "todo": key, // Envoyer au format "localId#todoText"
          "done": local.isCompleted,
        };

        debugPrint("üì§ Envoi vers serveur: $payload");

        //  Ins√©rer dans le serveur
        final insertResponse = await ApiService.insertTodo(payload);

        if (insertResponse['success'] == true && insertResponse['todo_id'] != null) {
          final newServerId = int.tryParse(insertResponse['todo_id'].toString());

          //  Marquer comme synchronis√© en local
          await db.update(
            'todos',
            {
              'todo_id': newServerId,
              'synced': 1,
              'created_locally': 0,
              'updated_at': DateTime.now().toIso8601String(),
            },
            where: 'id = ?', // Utiliser l'ID de la table locale
            whereArgs: [local.id],
          );

          debugPrint("‚úÖ Todo synchronis√©: $key -> serveur ID: $newServerId");
          syncedCount++;
        } else {
          debugPrint("‚ùå √âchec insertion serveur pour: $key");
        }
      }

      //  √âTAPE 2 : Supprimer du serveur les todos qui n'existent plus en local
      debugPrint("üóëÔ∏è V√©rification des suppressions...");

      // Construire un Set des cl√©s locales (format: id#todo)
      final Set<String> localKeys = localTodos.map((local) {
        final localId = local.id?.toString() ?? '';
        return "$localId#${local.todo}";
      }).toSet();

      debugPrint("üîç Cl√©s locales: $localKeys");

      for (final serverTodo in serverTodos) {
        final serverKey = serverTodo.todo;

        // Si la cl√© serveur n'existe pas en local, la t√¢che a √©t√© supprim√©e
        if (!localKeys.contains(serverKey)) {
          debugPrint("üóëÔ∏è Todo supprim√© localement, suppression serveur: $serverKey");

          if (serverTodo.todoId != null) {
            try {
              // Utiliser votre m√©thode existante
              final deleteResponse = await ApiService.deleteTodo(serverTodo.todoId!);

              debugPrint("‚úÖ Todo supprim√© du serveur: $serverKey");
              deletedCount++;

            } catch (e) {
              debugPrint("‚ùå √âchec suppression serveur pour: $serverKey - Erreur: $e");
            }
          } else {
            debugPrint("‚ö†Ô∏è Impossible de supprimer: todoId null pour $serverKey");
          }
        }
      }

      debugPrint("‚úÖ Sync termin√© : $syncedCount trait√©s (ins√©r√©s/mis √† jour), $skippedCount ignor√©s, $deletedCount supprim√©s");

    } catch (e) {
      debugPrint("‚ùå Erreur lors du sync : $e");
    }
  }


}